compose:
  - call: lcod://tooling/test_checker@1
    in:
      compose:
        - call: lcod://tooling/script@1
          in:
            source: |
              async ({ state, imports }) => {
                const repoRoot = state.repoRoot;
                const manifestRelative = 'packages/tooling/array/append/0.1.0/manifest.json';
                const versionsRelative = 'packages/tooling/array/append/versions.json';
                const manifestPath = await imports.pathJoin({ base: repoRoot, segment: manifestRelative });
                const versionsPath = await imports.pathJoin({ base: repoRoot, segment: versionsRelative });
                const manifestContent = await imports.fsReadFile({ path: manifestPath.path, encoding: 'utf-8' });
                const versionsContent = await imports.fsReadFile({ path: versionsPath.path, encoding: 'utf-8' });
                const versions = JSON.parse(versionsContent.data ?? versionsContent);
                const versionEntry = Array.isArray(versions.versions)
                  ? versions.versions.find((item) => item.version === '0.1.0')
                  : null;
                if (!versionEntry) {
                  throw new Error('Version 0.1.0 missing from versions.json');
                }
                const registryUrl = `file://${repoRoot}`;
                return {
                  registry: {
                    id: 'official',
                    type: 'file',
                    url: registryUrl
                  },
                  entry: {
                    id: 'lcod://tooling/array/append',
                    version: '0.1.0',
                    manifest: versionEntry.manifest,
                    registryId: 'official'
                  },
                  manifestContent: manifestContent.data ?? manifestContent
                };
              }
            input:
              repoRoot: $env.LCOD_REGISTRY_ROOT ?? '.'
            imports:
              pathJoin: lcod://axiom/path/join@1
              fsReadFile: lcod://axiom/fs/read-file@1
          out:
            registry: registry
            entry: entry
            manifestContent: manifestContent

        - call: lcod://axiom/path/join@1
          in:
            base: './.tmp'
            segment: 'resolve-std/cache'
          out:
            path: cacheRoot

        - call: lcod://tooling/registry/fetch@0.1.0
          in:
            entry: $.entry
            registry: $.registry
            cache:
              root: $.cacheRoot
          out:
            manifestPath: manifestPath
            manifest: manifest
            manifestIntegrity: integrity

        - call: lcod://tooling/script@1
          in:
            source: |
              async ({ state }) => ({
                manifestMatches: JSON.stringify(state.manifest, null, 2) + '\n' === state.manifestContent,
                manifestPath: state.manifestPath,
                integrity: state.integrity
              })
            input:
              manifest: $.manifest
              manifestContent: $.manifestContent
              manifestPath: $.manifestPath
              integrity: $.integrity
          out:
            manifestMatches: manifestMatches
            manifestPath: manifestPath
            integrity: integrity
      expected:
        manifestMatches: true
    out:
      report: report
